#lang racket



(define (var? t)
  (symbol? t))

(define (var x)
  x)

;;
(define (neg? t)
  (and (list? t)
       (= 2 (length t))
       (eq? 'neg (car t))))

(define (neg x)
  (list 'neg x))

(define (neg-subf f)
  (second f))

;;
(define (conj? t)
  (and (list? t)
       (= 3 (length t))
       (eq? 'conj (car t))))

(define (conj t1 t2)
  (list 'conj t1 t2))

(define (conj-left t)
  (second t))

(define (conj-right t)
  (third t))

;;
(define (disj? t)
  (and (list? t)
       (= 3 (length t))
       (eq? 'disj (car t))))

(define (disj t1 t2)
  (list 'disj t1 t2))

(define (disj-left t)
  (second t))

(define (disj-right t)
  (third t))

(define (prop? f)
  (or (var? f)
      (and (neg? f)
           (prop? (neg-subf f)))
      (and (disj? f)
           (prop? (disj-left f))
           (prop? (disj-right f)))
      (and (conj? f)
           (prop? (conj-left f))
           (prop? (conj-right f)))))

;;
(define (free-vars x)
  (define (pom x xs)
    (cond [(var? x) (list x)]
          [(neg? x) (append xs (pom (neg-subf x) xs))]
          [(disj? x) (append xs (pom (disj-left x) xs)
                             (pom (disj-right x) xs))]
          [(conj? x) (append xs (pom (conj-left x) xs)
                             (pom (conj-right x) xs))]))
  (pom x null))












